{"version":3,"sources":["/source/ResizeComponent.es.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAaM;;;;;;;;;4BAIL,+BAAW;;;AACV,mBAAM,QAAN,CAAe,YAAM;AACpB,QAAI,QAAQ,OAAK,cAAL,EAAR,CADgB;;AAGpB,WAAK,WAAL,GAAmB,MAAM,aAAN,CAHC;AAIpB,WAAK,UAAL,GAAkB,MAAM,YAAN,CAJE;;AAMpB,WAAK,WAAL,GAAmB,OAAK,UAAL,GAAkB,OAAK,WAAL,CANjB;;AAQpB,WAAK,iBAAL,GAAyB,OAAK,OAAL,CAAa,aAAb,CAA2B,MAAM,OAAK,GAAL,GAAW,QAAjB,CAApD,CARoB;AASpB,WAAK,gBAAL,GAAwB,OAAK,OAAL,CAAa,aAAb,CAA2B,MAAM,OAAK,GAAL,GAAW,OAAjB,CAAnD,CAToB;;AAWpB,WAAK,eAAL,GAAuB,IAAvB,CAXoB;IAAN,CAAf,CADU;;;AAJN,4BA0BL,2BAAQ,WAAW;AAClB,OAAI,YAAY,SAAS,aAAT,CAAuB,QAAvB,CAAZ,CADc;AAElB,aAAU,KAAV,GAAkB,UAAU,GAAV,CAAc,KAAd,CAFA;AAGlB,aAAU,MAAV,GAAmB,UAAU,GAAV,CAAc,MAAd,CAHD;;AAKlB,aAAU,UAAV,CAAqB,IAArB,EAA2B,YAA3B,CAAwC,UAAU,GAAV,EAAe,CAAvD,EAA0D,CAA1D,EALkB;;AAOlB,OAAI,SAAS,SAAS,aAAT,CAAuB,QAAvB,CAAT,CAPc;AAQlB,UAAO,KAAP,GAAe,KAAK,UAAL,CARG;AASlB,UAAO,MAAP,GAAgB,KAAK,WAAL,CATE;;AAWlB,UAAO,UAAP,CAAkB,IAAlB,EAAwB,SAAxB,CAAkC,SAAlC,EAA6C,CAA7C,EAAgD,CAAhD,EAAmD,KAAK,UAAL,EAAiB,KAAK,WAAL,CAApE,CAXkB;;AAalB,UAAO,4BAAmB,OAAnB,CAA2B,OAAO,SAAP,EAA3B,CAAP,CAbkB;;;AA1Bd,4BA+CL,yCAAe,OAAO;AACrB,OAAI,KAAK,eAAL,EAAsB;AACzB,QAAI,WAAW,MAAM,cAAN,CAAqB,KAArB,CADU;;AAGzB,QAAI,MAAM,cAAN,KAAyB,KAAK,gBAAL,EAAuB;AACnD,UAAK,WAAL,GAAmB,WAAW,KAAK,WAAL,CADqB;AAEnD,UAAK,UAAL,GAAkB,QAAlB,CAFmD;;AAInD,UAAK,iBAAL,CAAuB,KAAvB,GAA+B,KAAK,WAAL,CAJoB;KAApD,MAKO;AACN,UAAK,WAAL,GAAmB,QAAnB,CADM;AAEN,UAAK,UAAL,GAAkB,WAAW,KAAK,WAAL,CAFvB;;AAIN,UAAK,gBAAL,CAAsB,KAAtB,GAA8B,KAAK,UAAL,CAJxB;KALP;IAHD;;;AAhDI,4BAwEL,uDAAsB,OAAO;AAC5B,QAAK,eAAL,GAAuB,CAAC,KAAK,eAAL,CADI;;;SAxExB;;;;;;;;AAkFN,iBAAgB,KAAhB,GAAwB;;;;;AAKvB,kBAAgB;AACf,cAAW,eAAK,UAAL;GADZ;EALD;;;AAWA,eAAI,QAAJ,CAAa,eAAb;;mBAEe","sourcesContent":["import Component from 'metal-component/src/Component';\nimport Soy from 'metal-soy/src/Soy';\n\nimport async from 'metal/src/async/async';\nimport core from 'metal/src/core';\nimport { CancellablePromise } from 'metal-promise/src/promise/Promise';\n\nimport componentTemplates from './ResizeComponent.soy';\nimport controlsTemplates from './ResizeControls.soy';\n\n/**\n * Resize Component\n */\nclass ResizeComponent extends Component {\n\t/**\n\t * @inheritDoc\n\t */\n\tattached() {\n\t\tasync.nextTick(() =>Â {\n\t\t\tlet image = this.getEditorImage();\n\n\t\t\tthis.imageHeight = image.naturalHeight;\n\t\t\tthis.imageWidth = image.naturalWidth;\n\n\t\t\tthis.imageRatio_ = this.imageWidth / this.imageHeight;\n\n\t\t\tthis.imageHeightInput_ = this.element.querySelector('#' + this.key + 'Height');\n\t\t\tthis.imageWidthInput_ = this.element.querySelector('#' + this.key + 'Width');\n\n\t\t\tthis.lockProportions = true;\n\t\t});\n\t}\n\n\t/**\n\t * Executes the resize operation to get the final version of the image.\n\t *\n\t * @param  {Object} imageData An object with several image representations.\n\t * @return {CancellablePromise} A promise that will resolve with the resized image URL representation.\n\t */\n\tprocess(imageData) {\n\t\tlet rawCanvas = document.createElement('canvas');\n\t\trawCanvas.width = imageData.raw.width;\n\t\trawCanvas.height = imageData.raw.height;\n\n\t\trawCanvas.getContext('2d').putImageData(imageData.raw, 0, 0);\n\n\t\tlet canvas = document.createElement('canvas');\n\t\tcanvas.width = this.imageWidth;\n\t\tcanvas.height = this.imageHeight;\n\n\t\tcanvas.getContext('2d').drawImage(rawCanvas, 0, 0, this.imageWidth, this.imageHeight);\n\n\t\treturn CancellablePromise.resolve(canvas.toDataURL());\n\t}\n\n\t/**\n\t * Keeps the width/height ratio when the lockProportions is set to true.\n\t *\n\t * @param  {InputEvent} event\n\t */\n\tsyncDimensions(event) {\n\t\tif (this.lockProportions) {\n\t\t\tlet newValue = event.delegateTarget.value;\n\n\t\t\tif (event.delegateTarget === this.imageWidthInput_) {\n\t\t\t\tthis.imageHeight = newValue / this.imageRatio_;\n\t\t\t\tthis.imageWidth = newValue;\n\n\t\t\t\tthis.imageHeightInput_.value = this.imageHeight;\n\t\t\t} else {\n\t\t\t\tthis.imageHeight = newValue;\n\t\t\t\tthis.imageWidth = newValue * this.imageRatio_;\n\n\t\t\t\tthis.imageWidthInput_.value = this.imageWidth;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Toggles the value of the lockProportions attribute. When enabled, changes\n\t * in one of the dimensions will cascade changes to the other in order to keep\n\t * the original image ratio.\n\t *\n\t * @param  {MouseEvent} event\n\t */\n\ttoggleLockProportions(event) {\n\t\tthis.lockProportions = !this.lockProportions;\n\t}\n}\n\n/**\n * State definition.\n * @type {!Object}\n * @static\n */\nResizeComponent.STATE = {\n\t/**\n\t * Injected helper to get the editor image\n\t * @type {Function}\n\t */\n\tgetEditorImage: {\n\t\tvalidator: core.isFunction\n\t}\n};\n\n// Register component\nSoy.register(ResizeComponent, componentTemplates);\n\nexport default ResizeComponent;"]}