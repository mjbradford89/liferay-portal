{"version":3,"sources":["/source/CropComponent.es.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAYM;;;;;;;;;0BASL,2BAAQ,WAAW;AAClB,OAAI,cAAc,KAAK,UAAL,CAAgB,KAAK,GAAL,GAAW,aAAX,CAA9B,CADc;AAElB,OAAI,YAAY;AACf,SAAK,YAAY,OAAZ,CAAoB,SAApB;AACL,UAAM,YAAY,OAAZ,CAAoB,UAApB;AACN,WAAO,YAAY,OAAZ,CAAoB,WAApB;AACP,YAAQ,YAAY,OAAZ,CAAoB,YAApB;IAJL,CAFc;;AASlB,OAAI,QAAQ,KAAK,cAAL,EAAR,CATc;;AAWlB,OAAI,kBAAkB,UAAU,GAAV,CAAc,KAAd,GAAsB,MAAM,WAAN,CAX1B;AAYlB,OAAI,gBAAgB,UAAU,GAAV,CAAc,MAAd,GAAuB,MAAM,YAAN,CAZzB;;AAclB,OAAI,YAAY,SAAS,aAAT,CAAuB,QAAvB,CAAZ,CAdc;AAelB,aAAU,KAAV,GAAkB,UAAU,GAAV,CAAc,KAAd,CAfA;AAgBlB,aAAU,MAAV,GAAmB,UAAU,GAAV,CAAc,MAAd,CAhBD;;AAkBlB,aAAU,UAAV,CAAqB,IAArB,EAA2B,YAA3B,CAAwC,UAAU,GAAV,EAAe,CAAvD,EAA0D,CAA1D,EAlBkB;;AAoBlB,OAAI,SAAS,SAAS,aAAT,CAAuB,QAAvB,CAAT,CApBc;AAqBlB,UAAO,KAAP,GAAe,UAAU,KAAV,GAAkB,eAAlB,CArBG;AAsBlB,UAAO,MAAP,GAAgB,UAAU,MAAV,GAAmB,aAAnB,CAtBE;;AAwBlB,UAAO,UAAP,CAAkB,IAAlB,EAAwB,SAAxB,CAAkC,SAAlC,EAA6C,UAAU,IAAV,GAAiB,eAAjB,EAAkC,UAAU,GAAV,GAAgB,aAAhB,EAA+B,UAAU,KAAV,GAAkB,eAAlB,EAAmC,UAAU,MAAV,GAAmB,aAAnB,EAAkC,CAAnL,EAAsL,CAAtL,EAAyL,UAAU,KAAV,GAAkB,eAAlB,EAAmC,UAAU,MAAV,GAAmB,aAAnB,CAA5N,CAxBkB;;AA0BlB,eAAY,OAAZ,GA1BkB;;AA4BlB,UAAO,4BAAmB,OAAnB,CAA2B,OAAO,SAAP,EAA3B,CAAP,CA5BkB;;;SATd;;;;;;;;AA8CN,eAAc,KAAd,GAAsB;;;;;AAKrB,kBAAgB;AACf,cAAW,eAAK,UAAL;GADZ;EALD;;;AAWA,eAAI,QAAJ,CAAa,aAAb;;mBAEe","sourcesContent":["import Component from 'metal-component/src/Component';\nimport Soy from 'metal-soy/src/Soy';\n\nimport core from 'metal/src/core';\nimport { CancellablePromise } from 'metal-promise/src/promise/Promise';\n\nimport componentTemplates from './CropComponent.soy';\nimport controlsTemplates from './CropControls.soy';\n\n/**\n * Crop Component\n */\nclass CropComponent extends Component {\n\t/**\n\t * Applies the brighntess filter to generate a final\n\t * version of the image.\n\t *\n\t * @param  {Object} imageData An object with several image representations.\n\t * @return {CancellablePromise} A promise that will resolve when the webworker\n\t * finishes processing the image for preview.\n\t */\n\tprocess(imageData) {\n\t\tlet cropHandles = this.components[this.key + 'CropHandles'];\n\t\tlet selection = {\n\t\t\ttop: cropHandles.element.offsetTop,\n\t\t\tleft: cropHandles.element.offsetLeft,\n\t\t\twidth: cropHandles.element.offsetWidth,\n\t\t\theight: cropHandles.element.offsetHeight\n\t\t};\n\n\t\tlet image = this.getEditorImage();\n\n\t\tvar horizontalRatio = imageData.raw.width / image.offsetWidth;\n\t\tvar verticalRatio = imageData.raw.height / image.offsetHeight;\n\n\t\tlet rawCanvas = document.createElement('canvas');\n\t\trawCanvas.width = imageData.raw.width;\n\t\trawCanvas.height = imageData.raw.height;\n\n\t\trawCanvas.getContext('2d').putImageData(imageData.raw, 0, 0);\n\n\t\tlet canvas = document.createElement('canvas');\n\t\tcanvas.width = selection.width * horizontalRatio;\n\t\tcanvas.height = selection.height * verticalRatio;\n\n\t\tcanvas.getContext('2d').drawImage(rawCanvas, selection.left * horizontalRatio, selection.top * verticalRatio, selection.width * horizontalRatio, selection.height * verticalRatio, 0, 0, selection.width * horizontalRatio, selection.height * verticalRatio);\n\n\t\tcropHandles.dispose();\n\n\t\treturn CancellablePromise.resolve(canvas.toDataURL());\n\t}\n}\n\n/**\n * State definition.\n * @type {!Object}\n * @static\n */\nCropComponent.STATE = {\n\t/**\n\t * Injected helper to get the editor image\n\t * @type {Function}\n\t */\n\tgetEditorImage: {\n\t\tvalidator: core.isFunction\n\t}\n};\n\n// Register component\nSoy.register(CropComponent, componentTemplates);\n\nexport default CropComponent;"]}