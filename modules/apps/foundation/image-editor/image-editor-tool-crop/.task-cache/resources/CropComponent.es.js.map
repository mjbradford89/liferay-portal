{"version":3,"sources":["/source/CropComponent.es.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAYM;;;;;;;;;gCASF,2BAAQ,WAAW;AACf,gBAAI,cAAc,KAAK,UAAL,CAAgB,KAAK,GAAL,GAAW,aAAX,CAA9B,CADW;AAEf,gBAAI,YAAY;AACZ,qBAAK,YAAY,OAAZ,CAAoB,SAApB;AACL,sBAAM,YAAY,OAAZ,CAAoB,UAApB;AACN,uBAAO,YAAY,OAAZ,CAAoB,WAApB;AACP,wBAAQ,YAAY,OAAZ,CAAoB,YAApB;aAJR,CAFW;;AASf,gBAAI,QAAQ,KAAK,cAAL,EAAR,CATW;;AAWf,gBAAI,kBAAkB,UAAU,GAAV,CAAc,KAAd,GAAsB,MAAM,WAAN,CAX7B;AAYf,gBAAI,gBAAgB,UAAU,GAAV,CAAc,MAAd,GAAuB,MAAM,YAAN,CAZ5B;;AAcf,gBAAI,YAAY,SAAS,aAAT,CAAuB,QAAvB,CAAZ,CAdW;AAef,sBAAU,KAAV,GAAkB,UAAU,GAAV,CAAc,KAAd,CAfH;AAgBf,sBAAU,MAAV,GAAmB,UAAU,GAAV,CAAc,MAAd,CAhBJ;;AAkBf,sBAAU,UAAV,CAAqB,IAArB,EAA2B,YAA3B,CAAwC,UAAU,GAAV,EAAe,CAAvD,EAA0D,CAA1D,EAlBe;;AAoBf,gBAAI,SAAS,SAAS,aAAT,CAAuB,QAAvB,CAAT,CApBW;AAqBf,mBAAO,KAAP,GAAe,UAAU,KAAV,GAAkB,eAAlB,CArBA;AAsBf,mBAAO,MAAP,GAAgB,UAAU,MAAV,GAAmB,aAAnB,CAtBD;;AAwBf,mBAAO,UAAP,CAAkB,IAAlB,EAAwB,SAAxB,CAAkC,SAAlC,EAA6C,UAAU,IAAV,GAAiB,eAAjB,EAAkC,UAAU,GAAV,GAAgB,aAAhB,EAA+B,UAAU,KAAV,GAAkB,eAAlB,EAAmC,UAAU,MAAV,GAAmB,aAAnB,EAAkC,CAAnL,EAAsL,CAAtL,EAAyL,UAAU,KAAV,GAAkB,eAAlB,EAAmC,UAAU,MAAV,GAAmB,aAAnB,CAA5N,CAxBe;;AA0Bf,wBAAY,OAAZ,GA1Be;;AA4Bf,mBAAO,4BAAmB,OAAnB,CAA2B,OAAO,SAAP,EAA3B,CAAP,CA5Be;;;eATjB;;;;;;;;AA8CN,kBAAc,KAAd,GAAsB;;;;;AAKlB,wBAAgB;AACZ,uBAAW,eAAK,UAAL;SADf;KALJ;;;AAWA,kBAAI,QAAJ,CAAa,aAAb;;sBAEe","sourcesContent":["import Component from 'metal-component/src/Component';\nimport Soy from 'metal-soy/src/Soy';\n\nimport core from 'metal/src/core';\nimport { CancellablePromise } from 'metal-promise/src/promise/Promise';\n\nimport componentTemplates from './CropComponent.soy';\nimport controlsTemplates from './CropControls.soy';\n\n/**\n * Crop Component\n */\nclass CropComponent extends Component {\n    /**\n     * Applies the brighntess filter to generate a final\n     * version of the image.\n     *\n     * @param  {Object} imageData An object with several image representations.\n     * @return {CancellablePromise} A promise that will resolve when the webworker\n     * finishes processing the image for preview.\n     */\n    process(imageData) {\n        let cropHandles = this.components[this.key + 'CropHandles'];\n        let selection = {\n            top: cropHandles.element.offsetTop,\n            left: cropHandles.element.offsetLeft,\n            width: cropHandles.element.offsetWidth,\n            height: cropHandles.element.offsetHeight\n        };\n\n        let image = this.getEditorImage();\n\n        var horizontalRatio = imageData.raw.width / image.offsetWidth;\n        var verticalRatio = imageData.raw.height / image.offsetHeight;\n\n        let rawCanvas = document.createElement('canvas');\n        rawCanvas.width = imageData.raw.width;\n        rawCanvas.height = imageData.raw.height;\n\n        rawCanvas.getContext('2d').putImageData(imageData.raw, 0, 0);\n\n        let canvas = document.createElement('canvas');\n        canvas.width = selection.width * horizontalRatio;\n        canvas.height = selection.height * verticalRatio;\n\n        canvas.getContext('2d').drawImage(rawCanvas, selection.left * horizontalRatio, selection.top * verticalRatio, selection.width * horizontalRatio, selection.height * verticalRatio, 0, 0, selection.width * horizontalRatio, selection.height * verticalRatio);\n\n        cropHandles.dispose();\n\n        return CancellablePromise.resolve(canvas.toDataURL());\n    }\n}\n\n/**\n * State definition.\n * @type {!Object}\n * @static\n */\nCropComponent.STATE = {\n    /**\n     * Injected helper to get the editor image\n     * @type {Function}\n     */\n    getEditorImage: {\n        validator: core.isFunction\n    }\n};\n\n// Register component\nSoy.register(CropComponent, componentTemplates);\n\nexport default CropComponent;"]}