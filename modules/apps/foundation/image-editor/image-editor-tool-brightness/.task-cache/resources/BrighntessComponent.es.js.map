{"version":3,"sources":["/source/BrighntessComponent.es.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAYM;;;;;;;;;sCAIL,+BAAW;AACJ,iBAAK,MAAL,GAAc,EAAd,CADI;;;AAJN,sCAWF,+BAAW;AACP,iBAAK,MAAL,GAAc,EAAd,CADO;;;AAXT,sCAwBF,2BAAQ,WAAW;AACf,gBAAI,kBAAkB,KAAK,UAAL,CAAgB,gBAAhB,CAAiC,KAAjC,CADP;AAEf,gBAAI,UAAU,KAAK,MAAL,CAAY,eAAZ,CAAV,CAFW;;AAIf,gBAAI,CAAC,OAAD,EAAU;AACV,0BAAU,KAAK,YAAL,CAAkB;AACxB,qCAAiB,eAAjB;AACA,+BAAW,UAAU,OAAV;iBAFL,CAAV,CADU;;AAMV,qBAAK,MAAL,CAAY,eAAZ,IAA+B,OAA/B,CANU;aAAd;;AASA,mBAAO,OAAP,CAbe;;;AAxBjB,sCAgDF,2BAAQ,WAAW;;;AACf,gBAAI,kBAAkB,KAAK,UAAL,CAAgB,gBAAhB,CAAiC,KAAjC,CADP;;AAGf,mBAAO,gCAAuB,UAAC,OAAD,EAAU,MAAV,EAAqB;AAC/C,uBAAK,YAAL,CAAkB;AACd,qCAAiB,eAAjB;AACA,+BAAW,UAAU,GAAV;iBAFf,EAIK,IAJL,CAIU;2BAAU,QAAQ,UAAU,KAAV,CAAgB,MAAhB,CAAR;iBAAV,CAJV,CAD+C;aAArB,CAA9B,CAHe;;;AAhDjB,sCAmEF,qCAAa,SAAS;AAClB,mBAAO,gCAAuB,UAAC,OAAD,EAAU,MAAV,EAAqB;;AAE/C,oBAAI,YAAY,mEAAZ,CAF2C;AAG/C,oBAAI,gBAAgB,IAAI,MAAJ,CAAW,SAAX,CAAhB,CAH2C;;AAK/C,8BAAc,SAAd,GAA0B,UAAC,KAAD;2BAAW,QAAQ,MAAM,IAAN;iBAAnB,CALqB;AAM/C,8BAAc,WAAd,CAA0B,OAA1B,EAN+C;aAArB,CAA9B,CADkB;;;eAnEpB;;;;AAgFN,kBAAI,QAAJ,CAAa,mBAAb;;sBAEe","sourcesContent":["import Component from 'metal-component/src/Component';\nimport Soy from 'metal-soy/src/Soy';\n\nimport { CancellablePromise } from 'metal-promise/src/promise/Promise';\nimport Slider from 'metal-slider/src/Slider';\n\nimport componentTemplates from './BrightnessComponent.soy';\nimport controlsTemplates from './BrightnessControls.soy';\n\n/**\n * Brightness Component\n */\nclass BrightnessComponent extends Component {\n    /**\n     * @inheritDoc\n     */\n\tattached() {\n        this.cache_ = {};\n\t}\n\n    /**\n     * @inheritDoc\n     */\n    detached() {\n        this.cache_ = {};\n    }\n\n    /**\n     * Applies the brighntess filter to generate a final version of the\n     * image. It caches intermediate results to avoid processing again in\n     * case the same brightnessValue is requested again for the same image.\n     *\n     * @param  {Object} imageData An object with several image representations.\n     * @return {CancellablePromise} A promise that will resolve when the webworker\n     * finishes processing the image for preview.\n     */\n    preview(imageData) {\n        let brightnessValue = this.components.brightnessSlider.value;\n        let promise = this.cache_[brightnessValue];\n\n        if (!promise) {\n            promise = this.spawnWorker_({\n                brightnessValue: brightnessValue,\n                imageData: imageData.preview\n            });\n\n            this.cache_[brightnessValue] = promise;\n        }\n\n        return promise;\n    }\n\n    /**\n     * Applies the brighntess filter to generate a final\n     * version of the image.\n     *\n     * @param  {Object} imageData An object with several image representations.\n     * @return {CancellablePromise} A promise that will resolve when the webworker\n     * finishes processing the image for preview.\n     */\n    process(imageData) {\n        let brightnessValue = this.components.brightnessSlider.value;\n\n        return new CancellablePromise((resolve, reject) => {\n            this.spawnWorker_({\n                brightnessValue: brightnessValue,\n                imageData: imageData.raw\n            })\n                .then(result => resolve(imageData.toURL(result)));\n        });\n    }\n\n    /**\n     * Spawns the a webworker to do the image processing in a different thread.\n     *\n     * @param  {Object} message An object with the image and brightness value.\n     * @return {CancellablePromise} A promise that will resolve when the webworker\n     * finishes processing the image.\n     */\n    spawnWorker_(message) {\n        return new CancellablePromise((resolve, reject) => {\n            // TO-DO Do not hardcode module paths. Inject them from the parent.\n            let workerURI = '/o/liferay-image-editor-tool-brightness-1.0.0/BrightnessWorker.js';\n            let processWorker = new Worker(workerURI);\n\n            processWorker.onmessage = (event) => resolve(event.data);\n            processWorker.postMessage(message);\n        });\n    }\n}\n\n// Register component\nSoy.register(BrightnessComponent, componentTemplates);\n\nexport default BrightnessComponent;"]}