{"version":3,"sources":["/source/ImageEditor.es.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAaM;;;;;;;AAIL,WAJK,WAIL,CAAY,UAAZ,EAAwB;yBAJnB,aAImB;;gDACvB,sBAAM,UAAN,GADuB;;;;;;;;AASvB,SAAK,aAAL,GAAqB,CAArB;;;;;;;;;;;;;;AATuB,QAuBvB,CAAK,QAAL,GAAgB,CAAC;AAChB,SAAK,MAAK,KAAL;AACL,WAAO,+BAAoB,MAAK,KAAL,EAAY,MAAK,OAAL,CAAvC;IAFe,CAAhB,CAvBuB;;GAAxB;;;;;;;;;AAJK,wBAsCL,2BAAS;;;AACR,OAAI,kBAAkB,KAAK,UAAL,CAAgB,KAAK,EAAL,GAAU,oBAAV,GAAiC,KAAK,eAAL,CAAqB,OAArB,CAAnE,CADI;AAER,OAAI,QAAQ,KAAK,QAAL,CAAc,KAAK,aAAL,CAAd,CAAkC,KAAlC,CAFJ;;AAIR,SAAM,YAAN,GACE,IADF,CACO,UAAC,SAAD;WAAe,gBAAgB,OAAhB,CAAwB,SAAxB;IAAf,CADP,CAEE,IAFF,CAEO,UAAC,QAAD;WAAc,OAAK,mBAAL,CAAyB,QAAzB;IAAd,CAFP,CAGE,IAHF,CAGO,YAAM;AACX,WAAK,YAAL,GAAoB,KAApB,CADW;AAEX,WAAK,eAAL,GAAuB,IAAvB,CAFW;AAGX,WAAK,YAAL,GAAoB,IAApB,CAHW;AAIX,WAAK,YAAL,GAJW;IAAN,CAHP,CAJQ;;;AAtCJ,wBA0DL,mDAAoB,UAAU;;AAE7B,QAAK,aAAL,GAF6B;AAG7B,QAAK,QAAL,CAAc,MAAd,GAAuB,KAAK,aAAL,GAAqB,CAArB,CAHM;AAI7B,QAAK,QAAL,CAAc,KAAK,aAAL,CAAd,GAAoC;AACnC,SAAK,QAAL;AACA,WAAO,+BAAoB,QAApB,EAA8B,KAAK,OAAL,CAArC;IAFD,CAJ6B;;AAS7B,UAAO,4BAAmB,OAAnB,EAAP,CAT6B;;;AA1DzB,wBA0EL,6BAAU;AACT,QAAK,eAAL,GAAuB,IAAvB,CADS;AAET,QAAK,YAAL,GAAoB,IAApB,CAFS;AAGT,QAAK,YAAL,GAHS;;;AA1EL,wBAqFL,2CAAiB;AAChB,UAAO,KAAK,OAAL,CAAa,aAAb,CAA2B,uCAA3B,CAAP,CADgB;;;AArFZ,wBA8FL,6DAA0B;AACzB,UAAO,KAAK,OAAL,CAAa,aAAb,CAA2B,mCAA3B,CAAP,CADyB;;;AA9FrB,wBAkGL,mDAAqB;AACpB,UAAO,KAAK,QAAL,CAAc,KAAK,aAAL,CAAd,CAAkC,KAAlC,CAAwC,YAAxC,EAAP,CADoB;;;AAlGhB,wBA2GL,uBAAO;AACN,QAAK,aAAL,GADM;AAEN,QAAK,YAAL,GAFM;;;AA3GF,wBAqHL,+CAAkB,OAAO;AACxB,OAAI,WAAW,KAAK,YAAL,CAAkB,KAAlB,CAAwB,MAAxB,CACd,UAAC,IAAD,EAAO,IAAP;WAAgB,KAAK,MAAL,CAAY,KAAK,QAAL;IAA5B,EAA4C,EAD9B,CAAX,CADoB;;AAIxB,OAAI,SAAS,MAAM,cAAN,IAAwB,MAAM,aAAN,CAJb;AAKxB,OAAI,gBAAgB,OAAO,YAAP,CAAoB,cAApB,CAAhB,CALoB;AAMxB,OAAI,aAAa,OAAO,YAAP,CAAoB,WAApB,CAAb,CANoB;;AAQxB,QAAK,eAAL,GAAuB,SAAS,MAAT,CAAgB;WAAQ,KAAK,OAAL,KAAiB,aAAjB;IAAR,CAAhB,CAAwD,CAAxD,CAAvB,CARwB;AASxB,QAAK,YAAL,GAAoB,UAApB,CATwB;;AAWxB,QAAK,YAAL,GAXwB;;AAaxB,QAAK,YAAL,GAAoB,IAApB,CAbwB;AAcxB,QAAK,QAAL,CAAc,KAAK,aAAL,CAAd,CAAkC,KAAlC,CAAwC,aAAxC,GAdwB;;;AArHpB,wBA0IL,uDAAuB;AACtB,OAAI,kBAAkB,KAAK,UAAL,CAAgB,KAAK,EAAL,GAAU,oBAAV,GAAiC,KAAK,eAAL,CAAqB,OAArB,CAAnE,CADkB;AAEtB,OAAI,QAAQ,KAAK,QAAL,CAAc,KAAK,aAAL,CAAd,CAAkC,KAAlC,CAFU;;AAItB,SAAM,YAAN,GACE,IADF,CACO,UAAC,SAAD;WAAe,gBAAgB,OAAhB,CAAwB,SAAxB;IAAf,CADP,CAEE,IAFF,CAEO,UAAC,SAAD;WAAe,MAAM,OAAN,CAAc,SAAd;IAAf,CAFP,CAJsB;;;AA1IlB,wBAuJL,yBAAQ;AACP,QAAK,aAAL,GAAqB,CAArB,CADO;AAEP,QAAK,QAAL,CAAc,MAAd,GAAuB,CAAvB,CAFO;AAGP,QAAK,YAAL,GAHO;;;AAvJH,wBAmKL,uCAAe;AACd,QAAK,KAAL,GAAa,KAAK,QAAL,CAAc,KAAK,aAAL,CAAd,CAAkC,GAAlC,CADC;;AAGd,QAAK,OAAL,GAAe;AACd,aAAS,KAAK,aAAL,GAAqB,KAAK,QAAL,CAAc,MAAd,GAAuB,CAAvB;AAC9B,cAAU,KAAK,QAAL,CAAc,MAAd,GAAuB,CAAvB;AACV,aAAS,KAAK,aAAL,GAAqB,CAArB;IAHV,CAHc;;;AAnKV,wBAkLL,uBAAO;AACN,QAAK,aAAL,GADM;AAEN,QAAK,YAAL,GAFM;;;SAlLF;;;;AAyLN,eAAI,QAAJ,CAAa,WAAb;;mBAEe","sourcesContent":["import Component from 'metal-component/src/Component';\nimport Soy from 'metal-soy/src/Soy';\n\nimport { CancellablePromise } from 'metal-promise/src/promise/Promise';\nimport Dropdown from 'metal-dropdown/src/Dropdown';\n\nimport ImageStateUtils from './ImageEditorUtils.es';\n\nimport templates from './ImageEditor.soy';\n\n/**\n * ImageEditor Component\n */\nclass ImageEditor extends Component {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor(opt_config) {\n\t\tsuper(opt_config);\n\n\t\t/**\n\t \t * This index points to the current state in the history.\n\t \t *\n\t\t * @type {Number}\n\t\t * @protected\n\t\t */\n\t\tthis.historyIndex_ = 0;\n\n\t\t/**\n\t\t * History of the different image states during edition. Every\n\t\t * state entry represents a change to the image on top of the\n\t\t * previous image state.\n\t\t * - Images are represented as URIs or base64 encoded urls.\n\t\t * - State entries are objects with\n\t\t *     - url: the url representing the image\n\t\t *     - utils: image utils for this image\n\t \t *\n\t\t * @type {Array.<Object>}\n\t\t * @protected\n\t\t */\n\t\tthis.history_ = [{\n\t\t\turl: this.image,\n\t\t\tutils: new ImageStateUtils(this.image, this.element)\n\t\t}];\n\t}\n\n\t/**\n\t * Accepts the current changes applied by the active control and creates\n\t * a new entry in the history stack. Doing this will wipe out any\n\t * stale redo states.\n\t */\n\taccept() {\n\t\tlet selectedControl = this.components[this.id + '_selected_control_' + this.selectedControl.variant];\n\t\tlet utils = this.history_[this.historyIndex_].utils;\n\n\t\tutils.getImageData()\n\t\t\t.then((imageData) => selectedControl.process(imageData))\n\t\t\t.then((imageURL) => this.createHistoryEntry_(imageURL))\n\t\t\t.then(() => {\n\t\t\t\tthis.imagePreview = false;\n\t\t\t\tthis.selectedControl = null;\n\t\t\t\tthis.selectedTool = null;\n\t\t\t\tthis.syncHistory_();\n\t\t\t});\n\t}\n\n\t/**\n\t * Creates a new history entry state.\n\t *\n\t * @param  {String} imageURL The URL representing the image new state.\n\t */\n\tcreateHistoryEntry_(imageURL) {\n\t\t// Push new state and discard stale redo states\n\t\tthis.historyIndex_++;\n\t\tthis.history_.length = this.historyIndex_ + 1;\n\t\tthis.history_[this.historyIndex_] = {\n\t\t\turl: imageURL,\n\t\t\tutils: new ImageStateUtils(imageURL, this.element)\n\t\t};\n\n\t\treturn CancellablePromise.resolve();\n\t}\n\n\t/**\n\t * Discards the current changes applied by the active control and reverts\n\t * the image to its state before the control activation.\n\t */\n\tdiscard() {\n\t\tthis.selectedControl = null;\n\t\tthis.selectedTool = null;\n\t\tthis.syncHistory_();\n\t}\n\n\t/**\n\t * Retrieves the editor image DOM node.\n\t *\n\t * @return {Element} The image element.\n\t */\n\tgetEditorImage() {\n\t\treturn this.element.querySelector('.lfr-image-editor-image-container img');\n\t}\n\n\t/**\n\t * Retrieves the editor image container DOM node.\n\t *\n\t * @return {Element} The image container element.\n\t */\n\tgetEditorImageContainer() {\n\t\treturn this.element.querySelector('.lfr-image-editor-image-container');\n\t}\n\n\tgetEditorImageData() {\n\t\treturn this.history_[this.historyIndex_].utils.getImageData();\n\t}\n\n\t/**\n\t * Updates the image back to a previously undone state in the history.\n\t * Redoing an recovers the undone image changes and enables the undo\n\t * stack in case the user wants to undo the changes again.\n\t */\n\tredo() {\n\t\tthis.historyIndex_++;\n\t\tthis.syncHistory_();\n\t}\n\n\t/**\n\t * Selects a control and starts the edition phase for it.\n\t *\n\t * @param  {MouseEvent} event\n\t */\n\trequestEditorEdit(event) {\n\t\tlet controls = this.capabilities.tools.reduce(\n\t\t\t(prev, curr) => prev.concat(curr.controls), []);\n\n\t\tlet target = event.delegateTarget || event.currentTarget;\n\t\tlet targetControl = target.getAttribute('data-control');\n\t\tlet targetTool = target.getAttribute('data-tool');\n\n\t\tthis.selectedControl = controls.filter(tool => tool.variant === targetControl)[0];\n\t\tthis.selectedTool = targetTool;\n\n\t\tthis.syncHistory_();\n\n\t\tthis.imagePreview = true;\n\t\tthis.history_[this.historyIndex_].utils.enablePreview();\n\t}\n\n\t/**\n\t * Queues a request for a preview process of the current image by the\n\t * currently selected control.\n\t */\n\trequestEditorPreview() {\n\t\tlet selectedControl = this.components[this.id + '_selected_control_' + this.selectedControl.variant];\n\t\tlet utils = this.history_[this.historyIndex_].utils;\n\n\t\tutils.getImageData()\n\t\t\t.then((imageData) => selectedControl.preview(imageData))\n\t\t\t.then((imageData) => utils.preview(imageData));\n\t}\n\n\t/**\n\t * Discards all changes and restores the original state of the image.\n\t * Unlike the undo/redo methods, reset will wipe out all the history.\n\t */\n\treset() {\n\t\tthis.historyIndex_ = 0;\n\t\tthis.history_.length = 1;\n\t\tthis.syncHistory_();\n\t}\n\n\t/**\n\t * Syncs the image and history values after changes to the\n\t * history stack.\n\t *\n\t * @protected\n\t */\n\tsyncHistory_() {\n\t\tthis.image = this.history_[this.historyIndex_].url;\n\n\t\tthis.history = {\n\t\t\tcanRedo: this.historyIndex_ < this.history_.length - 1,\n\t\t\tcanReset: this.history_.length > 1,\n\t\t\tcanUndo: this.historyIndex_ > 0\n\t\t};\n\t}\n\n\t/**\n\t * Reverts the image to the previous state in the history. Undoing\n\t * an action brings back the previous version of the image and enables\n\t * the redo stack in case the user wants to reapply the change again.\n\t */\n\tundo() {\n\t\tthis.historyIndex_--;\n\t\tthis.syncHistory_();\n\t}\n}\n\n// Register component\nSoy.register(ImageEditor, templates);\n\nexport default ImageEditor;"]}