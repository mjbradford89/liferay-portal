{"version":3,"sources":["/source/ImageEditor.es.js"],"names":[],"mappings":"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","sourcesContent":["import Component from 'metal-component/src/Component';\nimport Soy from 'metal-soy/src/Soy';\n\nimport dom from 'metal-dom/src/dom';\nimport { CancellablePromise } from 'metal-promise/src/promise/Promise';\nimport Dropdown from 'metal-dropdown/src/Dropdown';\n\nimport ImageEditorHistoryEntry from './ImageEditorHistoryEntry.es';\n\nimport templates from './ImageEditor.soy';\n\n/**\n * ImageEditor Component\n */\nclass ImageEditor extends Component {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor(opt_config) {\n\t\tsuper(opt_config);\n\n\t\t/**\n\t \t * This index points to the current state in the history.\n\t \t *\n\t\t * @type {Number}\n\t\t * @protected\n\t\t */\n\t\tthis.historyIndex_ = 0;\n\n\t\t/**\n\t\t * History of the different image states during edition. Every\n\t\t * entry entry represents a change to the image on top of the\n\t\t * previous one.\n\t\t * - History entries are objects with\n\t\t *     - url (optional): the url representing the image\n\t\t *     - data: the ImageData object of the image\n\t \t *\n\t\t * @type {Array.<Object>}\n\t\t * @protected\n\t\t */\n\t\tthis.history_ = [\n\t\t\tnew ImageEditorHistoryEntry({\n\t\t\t\turl: this.image\n\t\t\t})\n\t\t];\n\n\t\tthis.history_[0].getImageData()\n\t\t\t.then((imageData) => {\n\t\t\t\tthis.restoreData_(imageData);\n\t\t\t\tthis.imageDataReady = true;\n\t\t\t});\n\t}\n\n\t/**\n\t * Accepts the current changes applied by the active control and creates\n\t * a new entry in the history stack. Doing this will wipe out any\n\t * stale redo states.\n\t */\n\taccept() {\n\t\tlet selectedControl = this.components[this.id + '_selected_control_' + this.selectedControl.variant];\n\n\t\tthis.history_[this.historyIndex_].getImageData()\n\t\t\t.then((imageData) => selectedControl.process(imageData))\n\t\t\t.then((imageData) => this.createHistoryEntry_(imageData))\n\t\t\t.then(() => this.syncHistory_())\n\t\t\t.then(() => {\n\t\t\t\tthis.selectedControl = null;\n\t\t\t\tthis.selectedTool = null;\n\t\t\t});\n\t}\n\n\t/**\n\t * Creates a new history entry state.\n\t *\n\t * @param  {ImageData} imageData The ImageData of the new image.\n\t */\n\tcreateHistoryEntry_(imageData) {\n\t\t// Push new state and discard stale redo states\n\t\tthis.historyIndex_++;\n\t\tthis.history_.length = this.historyIndex_ + 1;\n\t\tthis.history_[this.historyIndex_] = new ImageEditorHistoryEntry({data: imageData});\n\n\t\treturn CancellablePromise.resolve();\n\t}\n\n\t/**\n\t * Discards the current changes applied by the active control and reverts\n\t * the image to its state before the control activation.\n\t */\n\tdiscard() {\n\t\tthis.selectedControl = null;\n\t\tthis.selectedTool = null;\n\t\tthis.syncHistory_();\n\t}\n\n\t/**\n\t * Retrieves the editor canvas DOM node.\n\t *\n\t * @return {Element} The canvas element.\n\t */\n\tgetEditorCanvas() {\n\t\treturn this.element.querySelector('.lfr-image-editor-image-container canvas');\n\t}\n\n\t/**\n\t * Retrieves the ImageData representation of the current image.\n\t *\n\t * @return {CancellablePromise} A promise that will resolve with the image data.\n\t */\n\tgetEditorImageData() {\n\t\treturn this.history_[this.historyIndex_].getImageData();\n\t}\n\n\t/**\n\t * Updates the image back to a previously undone state in the history.\n\t * Redoing an action recovers the undone image changes and enables the\n\t * undo stack in case the user wants to undo the changes again.\n\t */\n\tredo() {\n\t\tthis.historyIndex_++;\n\t\tthis.syncHistory_();\n\t}\n\n\t/**\n\t * Selects a control and starts the edition phase for it.\n\t *\n\t * @param  {MouseEvent} event\n\t */\n\trequestEditorEdit(event) {\n\t\tlet controls = this.capabilities.tools.reduce(\n\t\t\t(prev, curr) => prev.concat(curr.controls), []);\n\n\t\tlet target = event.delegateTarget || event.currentTarget;\n\t\tlet targetControl = target.getAttribute('data-control');\n\t\tlet targetTool = target.getAttribute('data-tool');\n\n\t\tthis.syncHistory_()\n\t\t\t.then(() => {\n\t\t\t\tthis.selectedControl = controls.filter(tool => tool.variant === targetControl)[0];\n\t\t\t\tthis.selectedTool = targetTool;\n\t\t\t});\n\t}\n\n\t/**\n\t * Queues a request for a preview process of the current image by the\n\t * currently selected control.\n\t */\n\trequestEditorPreview() {\n\t\tlet selectedControl = this.components[this.id + '_selected_control_' + this.selectedControl.variant];\n\n\t\tthis.history_[this.historyIndex_].getImageData()\n\t\t\t.then((imageData) => selectedControl.preview(imageData))\n\t\t\t.then((imageData) => this.restoreData_(imageData));\n\t}\n\n\t/**\n\t * Discards all changes and restores the original state of the image.\n\t * Unlike the undo/redo methods, reset will wipe out all the history.\n\t */\n\treset() {\n\t\tthis.historyIndex_ = 0;\n\t\tthis.history_.length = 1;\n\t\tthis.syncHistory_();\n\t}\n\n\t/**\n\t * [restoreData_ description]\n\t * @param  {[type]} imageData [description]\n\t * @return {[type]}           [description]\n\t */\n\trestoreData_(imageData) {\n\t\tlet width = imageData.width;\n\t\tlet height = imageData.height;\n\n\t\tlet aspectRatio = width / height;\n\n\t\tlet offscreenCanvas = document.createElement('canvas');\n\t\toffscreenCanvas.width = width;\n\t\toffscreenCanvas.height = height;\n\n\t\tlet offscreenContext = offscreenCanvas.getContext('2d');\n\t\toffscreenContext.clearRect(0, 0, width, height);\n\t\toffscreenContext.putImageData(imageData, 0, 0);\n\n\t\tlet canvas = this.element.querySelector('.lfr-image-editor-image-container canvas');\n\n\t\tlet boundingBox = dom.closest(this.element, '#main-content');\n\t\tlet availableWidth = boundingBox.offsetWidth;\n\t\tlet availableHeight = boundingBox.offsetHeight - 142 - 40;\n\t\tlet availableAspectRatio = availableWidth / availableHeight;\n\n\t\tif (availableAspectRatio > 1) {\n\t\t\tcanvas.height = availableHeight;\n\t\t\tcanvas.width = aspectRatio * availableHeight;\n\t\t} else {\n\t\t\tcanvas.width = availableWidth;\n\t\t\tcanvas.height = availableWidth / aspectRatio;\n\t\t}\n\n\t\tlet context = canvas.getContext('2d');\n\t\tcontext.clearRect(0, 0, canvas.width, canvas.height);\n\t\tcontext.drawImage(offscreenCanvas, 0, 0, width, height, 0, 0, canvas.width, canvas.height);\n\n\t\tcanvas.style.width = canvas.width + 'px';\n\t\tcanvas.style.height = canvas.height + 'px';\n\t}\n\n\t/**\n\t * Syncs the image and history values after changes to the\n\t * history stack.\n\t *\n\t * @protected\n\t */\n\tsyncHistory_() {\n\t\treturn new CancellablePromise((resolve, reject) => {\n\t\t\tthis.history_[this.historyIndex_].getImageData()\n\t\t\t\t.then((imageData) => {\n\t\t\t\t\tthis.restoreData_(imageData);\n\n\t\t\t\t\tthis.history = {\n\t\t\t\t\t\tcanRedo: this.historyIndex_ < this.history_.length - 1,\n\t\t\t\t\t\tcanReset: this.history_.length > 1,\n\t\t\t\t\t\tcanUndo: this.historyIndex_ > 0\n\t\t\t\t\t};\n\n\t\t\t\t\tresolve();\n\t\t\t\t});\n\t\t\t});\n\t}\n\n\t/**\n\t * Reverts the image to the previous state in the history. Undoing\n\t * an action brings back the previous version of the image and enables\n\t * the redo stack in case the user wants to reapply the change again.\n\t */\n\tundo() {\n\t\tthis.historyIndex_--;\n\t\tthis.syncHistory_();\n\t}\n}\n\n// Register component\nSoy.register(ImageEditor, templates);\n\nexport default ImageEditor;"]}