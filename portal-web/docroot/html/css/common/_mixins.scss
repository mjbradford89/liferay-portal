@import "bourbon";

$breakpoint_phone: 768px !default;
$breakpoint_tablet: 980px !default;

$form_text_fields: 'input[type="color"], input[type="date"], input[type="datetime"], input[type="datetime-local"], input[type="email"], input[type="month"], input[type="number"], input[type="password"], input[type="search"], input[type="tel"], input[type="text"], input[type="time"], input[type="url"], input[type="week"], textarea, .uneditable-input' !default;

@mixin respond-to($types...) {
	$maxWidth: -1;
	$minWidth: -1;

	@each $type in $types {
		@if $type == phone {
			$maxWidth: if($maxWidth == -1, $breakpoint_phone - 1, $maxWidth);
			$minWidth: 0;
		}
		@else if $type == tablet {
			@if $maxWidth != 0 {
				$maxWidth: if($maxWidth == -1, $breakpoint_tablet - 1, max($breakpoint_tablet - 1, $maxWidth));
			}

			$minWidth: if($minWidth == -1, $breakpoint_phone, min($breakpoint_phone, $minWidth));
		}
		@else if $type == desktop {
			$maxWidth: 0;
			$minWidth: if($minWidth == -1, $breakpoint_tablet, $minWidth);
		}
	}

	@if $maxWidth <= 0 and $minWidth <= 0 {
		@content;
	}
	@else if $maxWidth <= 0 {
		@media (min-width: $minWidth) {
			@content;
		}
	}
	@else if $minWidth <= 0 {
		@media (max-width: $maxWidth) {
			@content;
		}
	}
	@else {
		@media (min-width: $minWidth) and (max-width: $maxWidth) {
			@content;
		}
	}
}

@mixin border-radius($radii) {
	@include prefixer(border-radius, $radii, spec);
}

@mixin border-top-left-radius($radii) {
	@include prefixer(border-top-left-radius, $radii, spec);
}

@mixin border-top-right-radius($radii) {
	@include prefixer(border-top-right-radius, $radii, spec);
}

@mixin border-bottom-left-radius($radii) {
	@include prefixer(border-bottom-left-radius, $radii, spec);
}

@mixin border-bottom-right-radius($radii) {
	@include prefixer(border-bottom-right-radius, $radii, spec);
}

@mixin opacity($opacity) {
	opacity: $opacity;
	$opacity-ie: $opacity * 100;
	filter: alpha(opacity=$opacity-ie); //IE8
}

@mixin box-shadow ($shadows...) {
	@include prefixer(box-shadow, $shadows, webkit moz ms o spec);
}

@mixin text-shadow ($shadows...) {
	@include prefixer(text-shadow, $shadows, webkit moz ms o spec);
}

$experimental-support-for-mozilla: true !default;
$experimental-support-for-webkit: true !default;
$experimental-support-for-opera: true !default;
$experimental-support-for-microsoft: true !default;
$experimental-support-for-khtml: false !default;

@mixin experimental($property, $value,
	$moz      : $experimental-support-for-mozilla,
	$webkit   : $experimental-support-for-webkit,
	$o        : $experimental-support-for-opera,
	$ms       : $experimental-support-for-microsoft,
	$khtml    : $experimental-support-for-khtml,
	$official : true
) {
	@if $webkit  and $experimental-support-for-webkit    { -webkit-#{$property} : $value; }
	@if $khtml   and $experimental-support-for-khtml     {  -khtml-#{$property} : $value; }
	@if $moz     and $experimental-support-for-mozilla   {    -moz-#{$property} : $value; }
	@if $ms      and $experimental-support-for-microsoft {     -ms-#{$property} : $value; }
	@if $o       and $experimental-support-for-opera     {      -o-#{$property} : $value; }
	@if $official                                        {         #{$property} : $value; }
}